/*
 * Generated by Digital. Don't modify this file!
 * Any changes will be lost if this file is regenerated.
 */

module CompUnsigned #(
    parameter Bits = 1
)
(
    input [(Bits -1):0] a,
    input [(Bits -1):0] b,
    output \> ,
    output \= ,
    output \<
);
    assign \> = a > b;
    assign \= = a == b;
    assign \< = a < b;
endmodule


module Mux_2x1_NBits #(
    parameter Bits = 2
)
(
    input [0:0] sel,
    input [(Bits - 1):0] in_0,
    input [(Bits - 1):0] in_1,
    output reg [(Bits - 1):0] out
);
    always @ (*) begin
        case (sel)
            1'h0: out = in_0;
            1'h1: out = in_1;
            default:
                out = 'h0;
        endcase
    end
endmodule


module intercambiadordig (
  input a3,
  input a2,
  input a1,
  input a0,
  input b3,
  input b2,
  input b1,
  input b0,
  input op,
  output ma,
  output eq,
  output me,
  output d0,
  output d1,
  output d2,
  output d3,
  output c0,
  output c1,
  output c2,
  output c3,
  output ne
);
  wire [3:0] s0;
  wire [3:0] s1;
  wire me_temp;
  wire ne_temp;
  wire [3:0] s2;
  wire [3:0] s3;
  assign s0[0] = a0;
  assign s0[1] = a1;
  assign s0[2] = a2;
  assign s0[3] = a3;
  assign s1[0] = b0;
  assign s1[1] = b1;
  assign s1[2] = b2;
  assign s1[3] = b3;
  CompUnsigned #(
    .Bits(4)
  )
  CompUnsigned_i0 (
    .a( s0 ),
    .b( s1 ),
    .\> ( ma ),
    .\= ( eq ),
    .\< ( me_temp )
  );
  assign ne_temp = (me_temp & op);
  Mux_2x1_NBits #(
    .Bits(4)
  )
  Mux_2x1_NBits_i1 (
    .sel( ne_temp ),
    .in_0( s0 ),
    .in_1( s1 ),
    .out( s2 )
  );
  Mux_2x1_NBits #(
    .Bits(4)
  )
  Mux_2x1_NBits_i2 (
    .sel( ne_temp ),
    .in_0( s1 ),
    .in_1( s0 ),
    .out( s3 )
  );
  assign d0 = s3[0];
  assign d1 = s3[1];
  assign d2 = s3[2];
  assign d3 = s3[3];
  assign c0 = s2[0];
  assign c1 = s2[1];
  assign c2 = s2[2];
  assign c3 = s2[3];
  assign me = me_temp;
  assign ne = ne_temp;
endmodule
