/*
 * Generated by Digital. Don't modify this file!
 * Any changes will be lost if this file is regenerated.
 */

module halfadder (
  input A,
  input B,
  output Co,
  output S
);
  assign S = (A ^ B);
  assign Co = (A & B);
endmodule

module fulladder (
  input A,
  input B,
  input Ci,
  output Co,
  output S
);
  wire s0;
  wire s1;
  wire s2;
  halfadder halfadder_i0 (
    .A( A ),
    .B( B ),
    .Co( s2 ),
    .S( s0 )
  );
  halfadder halfadder_i1 (
    .A( Ci ),
    .B( s0 ),
    .Co( s1 ),
    .S( S )
  );
  assign Co = (s2 | s1);
endmodule

module paralelladder (
  input a1,
  input b1,
  input a0,
  input b0,
  input a3,
  input b3,
  input a2,
  input b2,
  output s1,
  output s0,
  output s3,
  output s2,
  output s4
);
  wire s5;
  wire s6;
  wire s7;
  fulladder fulladder_i0 (
    .A( a0 ),
    .B( b0 ),
    .Ci( 1'b0 ),
    .Co( s5 ),
    .S( s0 )
  );
  fulladder fulladder_i1 (
    .A( a1 ),
    .B( b1 ),
    .Ci( s5 ),
    .Co( s6 ),
    .S( s1 )
  );
  fulladder fulladder_i2 (
    .A( a2 ),
    .B( b2 ),
    .Ci( s6 ),
    .Co( s7 ),
    .S( s2 )
  );
  fulladder fulladder_i3 (
    .A( a3 ),
    .B( b3 ),
    .Ci( s7 ),
    .Co( s4 ),
    .S( s3 )
  );
endmodule
