/*
 * Generated by Digital. Don't modify this file!
 * Any changes will be lost if this file is regenerated.
 */

`timescale 1ns / 1ps

module DIG_D_FF_1bit
#(
    parameter Default = 0
)
(
   input D,
   input C,
   output Q,
   output \~Q
);
    reg state;

    assign Q = state;
    assign \~Q = ~state;

    always @ (posedge C) begin
        state <= D;
    end

    initial begin
        state = Default;
    end
endmodule


module cuarto_s (
  input cl,
  output dvcl
);
  wire s0;
  wire s1;
  wire s2;
  wire s3;
  wire s4;
  wire s5;
  wire s6;
  wire s7;
  wire s8;
  wire s9;
  wire s10;
  wire s11;
  wire s12;
  wire s13;
  wire s14;
  wire s15;
  wire s16;
  wire s17;
  wire s18;
  wire s19;
  wire s20;
  wire s21;
  wire s22;
  wire s23;
  wire s24;
  wire s25;
  wire s26;
  wire s27;
  wire s28;
  wire s29;
  wire s30;
  wire s31;
  wire s32;
  wire s33;
  wire s34;
  wire s35;
  wire s36;
  wire s37;
  wire s38;
  wire s39;
  wire s40;
  wire s41;
  wire s42;
  wire s43;
  wire s44;
  wire s45;
  wire s46;
  DIG_D_FF_1bit #(
    .Default(0)
  )
  DIG_D_FF_1bit_i0 (
    .D( s0 ),
    .C( cl ),
    .Q( s1 ),
    .\~Q ( s0 )
  );
  DIG_D_FF_1bit #(
    .Default(0)
  )
  DIG_D_FF_1bit_i1 (
    .D( s2 ),
    .C( s1 ),
    .Q( s3 ),
    .\~Q ( s2 )
  );
  DIG_D_FF_1bit #(
    .Default(0)
  )
  DIG_D_FF_1bit_i2 (
    .D( s4 ),
    .C( s3 ),
    .Q( s5 ),
    .\~Q ( s4 )
  );
  DIG_D_FF_1bit #(
    .Default(0)
  )
  DIG_D_FF_1bit_i3 (
    .D( s6 ),
    .C( s5 ),
    .Q( s7 ),
    .\~Q ( s6 )
  );
  DIG_D_FF_1bit #(
    .Default(0)
  )
  DIG_D_FF_1bit_i4 (
    .D( s8 ),
    .C( s7 ),
    .Q( s9 ),
    .\~Q ( s8 )
  );
  DIG_D_FF_1bit #(
    .Default(0)
  )
  DIG_D_FF_1bit_i5 (
    .D( s10 ),
    .C( s9 ),
    .Q( s11 ),
    .\~Q ( s10 )
  );
  DIG_D_FF_1bit #(
    .Default(0)
  )
  DIG_D_FF_1bit_i6 (
    .D( s12 ),
    .C( s11 ),
    .Q( s13 ),
    .\~Q ( s12 )
  );
  DIG_D_FF_1bit #(
    .Default(0)
  )
  DIG_D_FF_1bit_i7 (
    .D( s14 ),
    .C( s13 ),
    .Q( s15 ),
    .\~Q ( s14 )
  );
  DIG_D_FF_1bit #(
    .Default(0)
  )
  DIG_D_FF_1bit_i8 (
    .D( s16 ),
    .C( s15 ),
    .Q( s17 ),
    .\~Q ( s16 )
  );
  DIG_D_FF_1bit #(
    .Default(0)
  )
  DIG_D_FF_1bit_i9 (
    .D( s18 ),
    .C( s17 ),
    .Q( s19 ),
    .\~Q ( s18 )
  );
  DIG_D_FF_1bit #(
    .Default(0)
  )
  DIG_D_FF_1bit_i10 (
    .D( s20 ),
    .C( s19 ),
    .Q( s21 ),
    .\~Q ( s20 )
  );
  DIG_D_FF_1bit #(
    .Default(0)
  )
  DIG_D_FF_1bit_i11 (
    .D( s22 ),
    .C( s21 ),
    .Q( s23 ),
    .\~Q ( s22 )
  );
  DIG_D_FF_1bit #(
    .Default(0)
  )
  DIG_D_FF_1bit_i12 (
    .D( s24 ),
    .C( s23 ),
    .Q( s25 ),
    .\~Q ( s24 )
  );
  DIG_D_FF_1bit #(
    .Default(0)
  )
  DIG_D_FF_1bit_i13 (
    .D( s26 ),
    .C( s25 ),
    .Q( s27 ),
    .\~Q ( s26 )
  );
  DIG_D_FF_1bit #(
    .Default(0)
  )
  DIG_D_FF_1bit_i14 (
    .D( s28 ),
    .C( s27 ),
    .Q( s29 ),
    .\~Q ( s28 )
  );
  DIG_D_FF_1bit #(
    .Default(0)
  )
  DIG_D_FF_1bit_i15 (
    .D( s30 ),
    .C( s29 ),
    .Q( s31 ),
    .\~Q ( s30 )
  );
  DIG_D_FF_1bit #(
    .Default(0)
  )
  DIG_D_FF_1bit_i16 (
    .D( s32 ),
    .C( s31 ),
    .Q( s33 ),
    .\~Q ( s32 )
  );
  DIG_D_FF_1bit #(
    .Default(0)
  )
  DIG_D_FF_1bit_i17 (
    .D( s34 ),
    .C( s33 ),
    .Q( s35 ),
    .\~Q ( s34 )
  );
  DIG_D_FF_1bit #(
    .Default(0)
  )
  DIG_D_FF_1bit_i18 (
    .D( s36 ),
    .C( s35 ),
    .Q( s37 ),
    .\~Q ( s36 )
  );
  DIG_D_FF_1bit #(
    .Default(0)
  )
  DIG_D_FF_1bit_i19 (
    .D( s38 ),
    .C( s37 ),
    .Q( s39 ),
    .\~Q ( s38 )
  );
  DIG_D_FF_1bit #(
    .Default(0)
  )
  DIG_D_FF_1bit_i20 (
    .D( s40 ),
    .C( s39 ),
    .Q( s41 ),
    .\~Q ( s40 )
  );
  DIG_D_FF_1bit #(
    .Default(0)
  )
  DIG_D_FF_1bit_i21 (
    .D( s42 ),
    .C( s41 ),
    .Q( s43 ),
    .\~Q ( s42 )
  );
  DIG_D_FF_1bit #(
    .Default(0)
  )
  DIG_D_FF_1bit_i22 (
    .D( s44 ),
    .C( s43 ),
    .Q( s45 ),
    .\~Q ( s44 )
  );
  DIG_D_FF_1bit #(
    .Default(0)
  )
  DIG_D_FF_1bit_i23 (
    .D( s46 ),
    .C( s45 ),
    .Q( dvcl ),
    .\~Q ( s46 )
  );
endmodule

module DIG_Counter_Nbit
#(
    parameter Bits = 2
)
(
    output [(Bits-1):0] out,
    output ovf,
    input C,
    input en,
    input clr
);
    reg [(Bits-1):0] count;

    always @ (posedge C) begin
        if (clr)
          count <= 'h0;
        else if (en)
          count <= count + 1'b1;
    end

    assign out = count;
    assign ovf = en? &count : 1'b0;

    initial begin
        count = 'h0;
    end
endmodule


module CompUnsigned #(
    parameter Bits = 1
)
(
    input [(Bits -1):0] a,
    input [(Bits -1):0] b,
    output \> ,
    output \= ,
    output \<
);
    assign \> = a > b;
    assign \= = a == b;
    assign \< = a < b;
endmodule


module seg (
  input cl_in,
  output cl_o
);
  wire cl_o_temp;
  wire s0;
  wire [25:0] s1;
  DIG_Counter_Nbit #(
    .Bits(26)
  )
  DIG_Counter_Nbit_i0 (
    .en( cl_o_temp ),
    .C( cl_in ),
    .clr( s0 ),
    .out( s1 )
  );
  CompUnsigned #(
    .Bits(26)
  )
  CompUnsigned_i1 (
    .a( s1 ),
    .b( 26'b10111110101111000010000000 ),
    .\< ( cl_o_temp )
  );
  assign s0 = ~ cl_o_temp;
  assign cl_o = cl_o_temp;
endmodule

module \f.alc  (
  output [15:0] s
);
  assign s = 16'b1010101111001101;
endmodule

module ctr (
  output [3:0] ctr
);
  assign ctr = 4'b1110;
endmodule

module cntr (
  input c,
  input cl,
  output [19:0] cn
);
  wire s0;
  assign s0 = ~ c;
  DIG_Counter_Nbit #(
    .Bits(20)
  )
  DIG_Counter_Nbit_i0 (
    .en( c ),
    .C( cl ),
    .clr( s0 ),
    .out( cn )
  );
endmodule

module relojC (
  input cl,
  output [19:0] cn
);
  wire const1b1;
  wire s0;
  assign const1b1 = 1'b1;
  assign s0 = ~ const1b1;
  DIG_Counter_Nbit #(
    .Bits(20)
  )
  DIG_Counter_Nbit_i0 (
    .en( const1b1 ),
    .C( cl ),
    .clr( s0 ),
    .out( cn )
  );
endmodule

module divFl (
  input cl,
  output dvcl
);
  wire s0;
  wire s1;
  wire s2;
  wire s3;
  wire s4;
  wire s5;
  wire s6;
  wire s7;
  wire s8;
  wire s9;
  wire s10;
  wire s11;
  wire s12;
  wire s13;
  wire s14;
  wire s15;
  wire s16;
  wire s17;
  wire s18;
  wire s19;
  wire s20;
  wire s21;
  wire s22;
  DIG_D_FF_1bit #(
    .Default(0)
  )
  DIG_D_FF_1bit_i0 (
    .D( s0 ),
    .C( cl ),
    .Q( s1 ),
    .\~Q ( s0 )
  );
  DIG_D_FF_1bit #(
    .Default(0)
  )
  DIG_D_FF_1bit_i1 (
    .D( s2 ),
    .C( s1 ),
    .Q( s3 ),
    .\~Q ( s2 )
  );
  DIG_D_FF_1bit #(
    .Default(0)
  )
  DIG_D_FF_1bit_i2 (
    .D( s4 ),
    .C( s3 ),
    .Q( s5 ),
    .\~Q ( s4 )
  );
  DIG_D_FF_1bit #(
    .Default(0)
  )
  DIG_D_FF_1bit_i3 (
    .D( s6 ),
    .C( s5 ),
    .Q( s7 ),
    .\~Q ( s6 )
  );
  DIG_D_FF_1bit #(
    .Default(0)
  )
  DIG_D_FF_1bit_i4 (
    .D( s8 ),
    .C( s7 ),
    .Q( s9 ),
    .\~Q ( s8 )
  );
  DIG_D_FF_1bit #(
    .Default(0)
  )
  DIG_D_FF_1bit_i5 (
    .D( s10 ),
    .C( s9 ),
    .Q( s11 ),
    .\~Q ( s10 )
  );
  DIG_D_FF_1bit #(
    .Default(0)
  )
  DIG_D_FF_1bit_i6 (
    .D( s12 ),
    .C( s11 ),
    .Q( s13 ),
    .\~Q ( s12 )
  );
  DIG_D_FF_1bit #(
    .Default(0)
  )
  DIG_D_FF_1bit_i7 (
    .D( s14 ),
    .C( s13 ),
    .Q( s15 ),
    .\~Q ( s14 )
  );
  DIG_D_FF_1bit #(
    .Default(0)
  )
  DIG_D_FF_1bit_i8 (
    .D( s16 ),
    .C( s15 ),
    .Q( s17 ),
    .\~Q ( s16 )
  );
  DIG_D_FF_1bit #(
    .Default(0)
  )
  DIG_D_FF_1bit_i9 (
    .D( s18 ),
    .C( s17 ),
    .Q( s19 ),
    .\~Q ( s18 )
  );
  DIG_D_FF_1bit #(
    .Default(0)
  )
  DIG_D_FF_1bit_i10 (
    .D( s20 ),
    .C( s19 ),
    .Q( s21 ),
    .\~Q ( s20 )
  );
  DIG_D_FF_1bit #(
    .Default(0)
  )
  DIG_D_FF_1bit_i11 (
    .D( s22 ),
    .C( s21 ),
    .Q( dvcl ),
    .\~Q ( s22 )
  );
endmodule

module DIG_Mul_unsigned #(
    parameter Bits = 1
)
(
    
      input [(Bits-1):0] a,
      input [(Bits-1):0] b,
      output [(Bits*2-1):0] mul
    
);
    assign mul = a * b;
endmodule


module distancia (
  input [19:0] cn,
  output [8:0] l,
  output [3:0] ld
);
  wire [39:0] s0;
  DIG_Mul_unsigned #(
    .Bits(20)
  )
  DIG_Mul_unsigned_i0 (
    .a( 20'b101100111 ),
    .b( cn ),
    .mul( s0 )
  );
  assign l[0] = s0[20];
  assign l[1] = s0[21];
  assign l[2] = s0[22];
  assign l[3] = s0[23];
  assign l[4] = s0[24];
  assign l[5] = s0[25];
  assign l[6] = s0[26];
  assign l[7] = s0[27];
  assign l[8] = s0[28];
  assign ld[0] = s0[16];
  assign ld[1] = s0[17];
  assign ld[2] = s0[18];
  assign ld[3] = s0[19];
endmodule

module tpulso (
  input [19:0] l,
  output ov
);
  wire s0;
  CompUnsigned #(
    .Bits(20)
  )
  CompUnsigned_i0 (
    .a( l ),
    .b( 20'b100010011 ),
    .\> ( s0 )
  );
  assign ov = ~ s0;
endmodule

module cntr4 (
  input cld,
  output [2:0] s
);
  wire const1b1;
  wire s0;
  assign const1b1 = 1'b1;
  assign s0 = ~ const1b1;
  DIG_Counter_Nbit #(
    .Bits(3)
  )
  DIG_Counter_Nbit_i0 (
    .en( const1b1 ),
    .C( cld ),
    .clr( s0 ),
    .out( s )
  );
endmodule

module sumres (
  input op,
  input a,
  input b,
  input cbi,
  output s,
  output cbo
);
  wire s0;
  assign s0 = ~ a;
  assign s = ((s0 & ~ b & cbi) | (s0 & b & ~ cbi) | (a & ~ b & ~ cbi) | (a & b & cbi));
  assign cbo = ((a & cbi & ~ op) | (a & b & ~ op) | (s0 & cbi & op) | (s0 & b & op) | (b & cbi));
endmodule

module Suma_resta (
  input a_3,
  input a_2,
  input a_1,
  input a_0,
  input b_3,
  input b_2,
  input b_1,
  input b_0,
  input Op,
  output s_4,
  output s_3,
  output s_2,
  output s_1,
  output s_0
);
  wire s0;
  wire s1;
  wire s2;
  sumres sumres_i0 (
    .op( Op ),
    .a( a_0 ),
    .b( b_0 ),
    .cbi( 1'b0 ),
    .s( s_0 ),
    .cbo( s2 )
  );
  sumres sumres_i1 (
    .op( Op ),
    .a( a_1 ),
    .b( b_1 ),
    .cbi( s2 ),
    .s( s_1 ),
    .cbo( s1 )
  );
  sumres sumres_i2 (
    .op( Op ),
    .a( a_2 ),
    .b( b_2 ),
    .cbi( s1 ),
    .s( s_2 ),
    .cbo( s0 )
  );
  sumres sumres_i3 (
    .op( Op ),
    .a( a_3 ),
    .b( b_3 ),
    .cbi( s0 ),
    .s( s_3 ),
    .cbo( s_4 )
  );
endmodule

module Mux_2x1_NBits #(
    parameter Bits = 2
)
(
    input [0:0] sel,
    input [(Bits - 1):0] in_0,
    input [(Bits - 1):0] in_1,
    output reg [(Bits - 1):0] out
);
    always @ (*) begin
        case (sel)
            1'h0: out = in_0;
            1'h1: out = in_1;
            default:
                out = 'h0;
        endcase
    end
endmodule


module bitsToBcd (
  input [3:0] b,
  output [3:0] d
);
  wire [3:0] s0;
  wire s1;
  wire s2;
  wire s3;
  wire s4;
  wire s5;
  wire s6;
  wire s7;
  wire [3:0] s8;
  wire s9;
  wire s10;
  wire s11;
  wire s12;
  wire s13;
  wire s14;
  wire s15;
  wire s16;
  wire [3:0] const4b3;
  assign const4b3 = 4'b11;
  assign s3 = b[0];
  assign s4 = b[1];
  assign s5 = b[2];
  assign s6 = b[3];
  assign s12 = const4b3[0];
  assign s11 = const4b3[1];
  assign s10 = const4b3[2];
  assign s9 = const4b3[3];
  assign s0[0] = s3;
  assign s0[1] = s4;
  assign s0[2] = s5;
  assign s0[3] = s6;
  Suma_resta Suma_resta_i0 (
    .a_3( s6 ),
    .a_2( s5 ),
    .a_1( s4 ),
    .a_0( s3 ),
    .b_3( s9 ),
    .b_2( s10 ),
    .b_1( s11 ),
    .b_0( s12 ),
    .Op( 1'b0 ),
    .s_3( s13 ),
    .s_2( s14 ),
    .s_1( s15 ),
    .s_0( s16 )
  );
  CompUnsigned #(
    .Bits(4)
  )
  CompUnsigned_i1 (
    .a( 4'b101 ),
    .b( s0 ),
    .\= ( s1 ),
    .\< ( s2 )
  );
  assign s8[0] = s16;
  assign s8[1] = s15;
  assign s8[2] = s14;
  assign s8[3] = s13;
  assign s7 = (s1 | s2);
  Mux_2x1_NBits #(
    .Bits(4)
  )
  Mux_2x1_NBits_i2 (
    .sel( s7 ),
    .in_0( s0 ),
    .in_1( s8 ),
    .out( d )
  );
endmodule

module \9bitsToBcd  (
  input [8:0] l,
  output [3:0] c,
  output [3:0] d,
  output [3:0] u
);
  wire [3:0] s0;
  wire [3:0] s1;
  wire [3:0] s2;
  wire [3:0] s3;
  wire [3:0] s4;
  wire [3:0] s5;
  wire [3:0] s6;
  wire [3:0] s7;
  wire [3:0] s8;
  wire [3:0] s9;
  wire [3:0] s10;
  wire [3:0] s11;
  wire [3:0] s12;
  wire [3:0] s13;
  wire [3:0] s14;
  wire [3:0] s15;
  wire [3:0] s16;
  wire [3:0] s17;
  wire [3:0] s18;
  wire [3:0] s19;
  assign s0[0] = l[6];
  assign s0[1] = l[7];
  assign s0[2] = l[8];
  assign s0[3] = 1'b0;
  bitsToBcd bitsToBcd_i0 (
    .b( s0 ),
    .d( s1 )
  );
  assign s2[0] = l[5];
  assign s2[1] = s1[0];
  assign s2[2] = s1[1];
  assign s2[3] = s1[2];
  bitsToBcd bitsToBcd_i1 (
    .b( s2 ),
    .d( s3 )
  );
  assign s4[0] = l[4];
  assign s4[1] = s3[0];
  assign s4[2] = s3[1];
  assign s4[3] = s3[2];
  assign s12[0] = s3[3];
  assign s12[1] = s1[3];
  assign s12[2] = 1'b0;
  assign s12[3] = 1'b0;
  bitsToBcd bitsToBcd_i2 (
    .b( s4 ),
    .d( s5 )
  );
  bitsToBcd bitsToBcd_i3 (
    .b( s12 ),
    .d( s13 )
  );
  assign s6[0] = l[3];
  assign s6[1] = s5[0];
  assign s6[2] = s5[1];
  assign s6[3] = s5[2];
  assign s14[0] = s5[3];
  assign s14[1] = s13[0];
  assign s14[2] = s13[1];
  assign s14[3] = s13[2];
  bitsToBcd bitsToBcd_i4 (
    .b( s6 ),
    .d( s7 )
  );
  bitsToBcd bitsToBcd_i5 (
    .b( s14 ),
    .d( s15 )
  );
  assign s8[0] = l[2];
  assign s8[1] = s7[0];
  assign s8[2] = s7[1];
  assign s8[3] = s7[2];
  assign s16[0] = s7[3];
  assign s16[1] = s15[0];
  assign s16[2] = s15[1];
  assign s16[3] = s15[2];
  bitsToBcd bitsToBcd_i6 (
    .b( s8 ),
    .d( s9 )
  );
  bitsToBcd bitsToBcd_i7 (
    .b( s16 ),
    .d( s17 )
  );
  assign s10[0] = l[1];
  assign s10[1] = s9[0];
  assign s10[2] = s9[1];
  assign s10[3] = s9[2];
  assign s18[0] = s9[3];
  assign s18[1] = s17[0];
  assign s18[2] = s17[1];
  assign s18[3] = s17[2];
  bitsToBcd bitsToBcd_i8 (
    .b( s10 ),
    .d( s11 )
  );
  bitsToBcd bitsToBcd_i9 (
    .b( s18 ),
    .d( s19 )
  );
  assign u[0] = l[0];
  assign u[1] = s11[0];
  assign u[2] = s11[1];
  assign u[3] = s11[2];
  assign c[0] = s19[3];
  assign c[1] = s17[3];
  assign c[2] = s15[3];
  assign c[3] = s13[3];
  assign d[0] = s11[3];
  assign d[1] = s19[0];
  assign d[2] = s19[1];
  assign d[3] = s19[2];
endmodule

module fraccion (
  input [3:0] b,
  output [3:0] d
);
  wire b_2;
  wire b_3;
  wire b_1;
  wire s0;
  wire s1;
  wire b_0;
  wire s2;
  assign b_0 = b[0];
  assign b_1 = b[1];
  assign b_2 = b[2];
  assign b_3 = b[3];
  assign s0 = ~ b_3;
  assign s1 = ~ b_2;
  assign s2 = ~ b_1;
  assign d[0] = ((b_0 & s2 & s0) | (~ b_0 & b_1 & s1) | (b_0 & b_2) | (~ b_0 & s1 & b_3) | (s2 & b_2 & s0) | (b_1 & b_3));
  assign d[1] = ((b_0 & b_1 & s1) | (b_0 & s1 & b_3) | (s2 & b_2 & s0) | (b_1 & s1 & b_3));
  assign d[2] = ((b_1 & b_2 & s0) | (s1 & b_3));
  assign d[3] = (b_2 & b_3);
endmodule

module Nollego (
  input [8:0] l,
  output ov
);
  wire s0;
  CompUnsigned #(
    .Bits(9)
  )
  CompUnsigned_i0 (
    .a( l ),
    .b( 9'b10001100 ),
    .\> ( s0 )
  );
  assign ov = ~ s0;
endmodule

module Demux3
#(
    parameter Default = 0 
)
(
    output out_0,
    output out_1,
    output out_2,
    output out_3,
    output out_4,
    output out_5,
    output out_6,
    output out_7,
    input [2:0] sel,
    input in
);
    assign out_0 = (sel == 3'h0)? in : Default;
    assign out_1 = (sel == 3'h1)? in : Default;
    assign out_2 = (sel == 3'h2)? in : Default;
    assign out_3 = (sel == 3'h3)? in : Default;
    assign out_4 = (sel == 3'h4)? in : Default;
    assign out_5 = (sel == 3'h5)? in : Default;
    assign out_6 = (sel == 3'h6)? in : Default;
    assign out_7 = (sel == 3'h7)? in : Default;
endmodule

module DIG_D_FF_Nbit
#(
    parameter Bits = 2,
    parameter Default = 0
)
(
   input [(Bits-1):0] D,
   input C,
   output [(Bits-1):0] Q,
   output [(Bits-1):0] \~Q
);
    reg [(Bits-1):0] state;

    assign Q = state;
    assign \~Q = ~state;

    always @ (posedge C) begin
        state <= D;
    end

    initial begin
        state = Default;
    end
endmodule


module led_h (
  input cen,
  input uni,
  input ll,
  output H
);
  assign H = ((~ cen & ~ ll) | (ll & ~ uni));
endmodule

module Mux_2x1
(
    input [0:0] sel,
    input in_0,
    input in_1,
    output reg out
);
    always @ (*) begin
        case (sel)
            1'h0: out = in_0;
            1'h1: out = in_1;
            default:
                out = 'h0;
        endcase
    end
endmodule


module DIG_Sub #(
    parameter Bits = 2
)
(
    input [(Bits-1):0] a,
    input [(Bits-1):0] b,
    input c_i,
    output [(Bits-1):0] s,
    output c_o
);
    wire [Bits:0] temp;

    assign temp = a - b - c_i;
    assign s = temp[(Bits-1):0];
    assign c_o = temp[Bits];
endmodule

module DIG_Add
#(
    parameter Bits = 1
)
(
    input [(Bits-1):0] a,
    input [(Bits-1):0] b,
    input c_i,
    output [(Bits - 1):0] s,
    output c_o
);
   wire [Bits:0] temp;

   assign temp = a + b + c_i;
   assign s = temp [(Bits-1):0];
   assign c_o = temp[Bits];
endmodule



module linea (
  input [8:0] d,
  output e_0,
  output [25:0] c
);
  wire [19:0] s0;
  wire [39:0] s1;
  wire [19:0] s2;
  wire s3;
  wire [19:0] s4;
  wire [19:0] s5;
  wire [39:0] s6;
  wire [25:0] s7;
  assign s0[8:0] = d;
  assign s0[19:9] = 11'b0;
  DIG_Mul_unsigned #(
    .Bits(20)
  )
  DIG_Mul_unsigned_i0 (
    .a( s0 ),
    .b( 20'b10001110110110110110 ),
    .mul( s1 )
  );
  assign s2[0] = s1[13];
  assign s2[1] = s1[14];
  assign s2[2] = s1[15];
  assign s2[3] = s1[16];
  assign s2[4] = s1[17];
  assign s2[5] = s1[18];
  assign s2[6] = s1[19];
  assign s2[7] = s1[20];
  assign s2[8] = s1[21];
  assign s2[9] = s1[22];
  assign s2[10] = s1[23];
  assign s2[11] = s1[24];
  assign s2[12] = s1[25];
  assign s2[13] = s1[26];
  assign s2[14] = s1[27];
  assign s2[15] = s1[28];
  assign s2[16] = s1[29];
  assign s2[17] = s1[30];
  assign s2[18] = s1[31];
  assign s2[19] = s1[32];
  CompUnsigned #(
    .Bits(20)
  )
  CompUnsigned_i1 (
    .a( s2 ),
    .b( 20'b110101100 ),
    .\< ( s3 )
  );
  DIG_Sub #(
    .Bits(20)
  )
  DIG_Sub_i2 (
    .a( s2 ),
    .b( 20'b110101100 ),
    .c_i( 1'b0 ),
    .s( s4 )
  );
  Mux_2x1_NBits #(
    .Bits(20)
  )
  Mux_2x1_NBits_i3 (
    .sel( s3 ),
    .in_0( s4 ),
    .in_1( 20'b0 ),
    .out( s5 )
  );
  CompUnsigned #(
    .Bits(20)
  )
  CompUnsigned_i4 (
    .a( s5 ),
    .b( 20'b0 ),
    .\= ( e_0 )
  );
  DIG_Mul_unsigned #(
    .Bits(20)
  )
  DIG_Mul_unsigned_i5 (
    .a( 20'b1100001101010000 ),
    .b( s5 ),
    .mul( s6 )
  );
  assign s7[0] = s6[0];
  assign s7[1] = s6[1];
  assign s7[2] = s6[2];
  assign s7[3] = s6[3];
  assign s7[4] = s6[4];
  assign s7[5] = s6[5];
  assign s7[6] = s6[6];
  assign s7[7] = s6[7];
  assign s7[8] = s6[8];
  assign s7[9] = s6[9];
  assign s7[10] = s6[10];
  assign s7[11] = s6[11];
  assign s7[12] = s6[12];
  assign s7[13] = s6[13];
  assign s7[14] = s6[14];
  assign s7[15] = s6[15];
  assign s7[16] = s6[16];
  assign s7[17] = s6[17];
  assign s7[18] = s6[18];
  assign s7[19] = s6[19];
  assign s7[20] = s6[20];
  assign s7[21] = s6[21];
  assign s7[22] = s6[22];
  assign s7[23] = s6[23];
  assign s7[24] = s6[24];
  assign s7[25] = s6[25];
  DIG_Add #(
    .Bits(26)
  )
  DIG_Add_i6 (
    .a( s7 ),
    .b( 26'b10011000100101101000000 ),
    .c_i( 1'b0 ),
    .s( c )
  );
endmodule

module si (
  input cl_in,
  output cl_o
);
  wire s0;
  wire s1;
  wire [16:0] s2;
  DIG_Counter_Nbit #(
    .Bits(17)
  )
  DIG_Counter_Nbit_i0 (
    .en( s0 ),
    .C( cl_in ),
    .clr( s1 ),
    .out( s2 )
  );
  assign s1 = ~ s0;
  CompUnsigned #(
    .Bits(17)
  )
  CompUnsigned_i1 (
    .a( s2 ),
    .b( 17'b1100010110101111 ),
    .\< ( s0 )
  );
  CompUnsigned #(
    .Bits(17)
  )
  CompUnsigned_i2 (
    .a( s2 ),
    .b( 17'b110001011011000 ),
    .\< ( cl_o )
  );
endmodule

module frecuency (
  input [8:0] d,
  output [19:0] f_2,
  output [19:0] f
);
  wire [19:0] s0;
  wire [39:0] s1;
  wire [19:0] s2;
  wire [19:0] f_2_temp;
  wire [39:0] s3;
  assign s0[8:0] = d;
  assign s0[19:9] = 11'b0;
  DIG_Mul_unsigned #(
    .Bits(20)
  )
  DIG_Mul_unsigned_i0 (
    .a( s0 ),
    .b( 20'b1111110110101 ),
    .mul( s1 )
  );
  assign s2[0] = s1[0];
  assign s2[1] = s1[1];
  assign s2[2] = s1[2];
  assign s2[3] = s1[3];
  assign s2[4] = s1[4];
  assign s2[5] = s1[5];
  assign s2[6] = s1[6];
  assign s2[7] = s1[7];
  assign s2[8] = s1[8];
  assign s2[9] = s1[9];
  assign s2[10] = s1[10];
  assign s2[11] = s1[11];
  assign s2[12] = s1[12];
  assign s2[13] = s1[13];
  assign s2[14] = s1[14];
  assign s2[15] = s1[15];
  assign s2[16] = s1[16];
  assign s2[17] = s1[17];
  assign s2[18] = s1[18];
  assign s2[19] = s1[19];
  DIG_Add #(
    .Bits(20)
  )
  DIG_Add_i1 (
    .a( s2 ),
    .b( 20'b1111110110100111 ),
    .c_i( 1'b0 ),
    .s( f_2_temp )
  );
  DIG_Mul_unsigned #(
    .Bits(20)
  )
  DIG_Mul_unsigned_i2 (
    .a( f_2_temp ),
    .b( 20'b10 ),
    .mul( s3 )
  );
  assign f[0] = s3[0];
  assign f[1] = s3[1];
  assign f[2] = s3[2];
  assign f[3] = s3[3];
  assign f[4] = s3[4];
  assign f[5] = s3[5];
  assign f[6] = s3[6];
  assign f[7] = s3[7];
  assign f[8] = s3[8];
  assign f[9] = s3[9];
  assign f[10] = s3[10];
  assign f[11] = s3[11];
  assign f[12] = s3[12];
  assign f[13] = s3[13];
  assign f[14] = s3[14];
  assign f[15] = s3[15];
  assign f[16] = s3[16];
  assign f[17] = s3[17];
  assign f[18] = s3[18];
  assign f[19] = s3[19];
  assign f_2 = f_2_temp;
endmodule

module la (
  input cl_in,
  input [8:0] d,
  output cl_o
);
  wire s0;
  wire s1;
  wire [19:0] s2;
  wire [19:0] s3;
  wire [19:0] s4;
  frecuency frecuency_i0 (
    .d( d ),
    .f_2( s4 ),
    .f( s3 )
  );
  CompUnsigned #(
    .Bits(20)
  )
  CompUnsigned_i1 (
    .a( s2 ),
    .b( s3 ),
    .\< ( s0 )
  );
  CompUnsigned #(
    .Bits(20)
  )
  CompUnsigned_i2 (
    .a( s2 ),
    .b( s4 ),
    .\< ( cl_o )
  );
  assign s1 = ~ s0;
  DIG_Counter_Nbit #(
    .Bits(20)
  )
  DIG_Counter_Nbit_i3 (
    .en( s0 ),
    .C( cl_in ),
    .clr( s1 ),
    .out( s2 )
  );
endmodule

module buzzer (
  input cl,
  input [8:0] d,
  output bu,
  output e_0
);
  wire e_0_temp;
  wire [25:0] s0;
  wire s1;
  wire s2;
  wire [25:0] s3;
  wire s4;
  wire s5;
  wire s6;
  wire s7;
  wire s8;
  wire s9;
  linea linea_i0 (
    .d( d ),
    .e_0( e_0_temp ),
    .c( s0 )
  );
  si si_i1 (
    .cl_in( cl ),
    .cl_o( s9 )
  );
  la la_i2 (
    .cl_in( cl ),
    .d( d ),
    .cl_o( s8 )
  );
  Mux_2x1 Mux_2x1_i3 (
    .sel( e_0_temp ),
    .in_0( s8 ),
    .in_1( s9 ),
    .out( s7 )
  );
  CompUnsigned #(
    .Bits(26)
  )
  CompUnsigned_i4 (
    .a( s3 ),
    .b( s0 ),
    .\< ( s4 )
  );
  Mux_2x1 Mux_2x1_i5 (
    .sel( s6 ),
    .in_0( s7 ),
    .in_1( 1'b1 ),
    .out( bu )
  );
  assign s6 = (~ e_0_temp & s5);
  DIG_D_FF_1bit #(
    .Default(0)
  )
  DIG_D_FF_1bit_i6 (
    .D( s4 ),
    .C( cl ),
    .Q( s1 )
  );
  assign s2 = ~ s1;
  DIG_Counter_Nbit #(
    .Bits(26)
  )
  DIG_Counter_Nbit_i7 (
    .en( s1 ),
    .C( cl ),
    .clr( s2 ),
    .out( s3 )
  );
  CompUnsigned #(
    .Bits(26)
  )
  CompUnsigned_i8 (
    .a( s3 ),
    .b( 26'b10011000100101101000000 ),
    .\< ( s5 )
  );
  assign e_0 = e_0_temp;
endmodule

module eq (
  input [3:0] bc,
  output eq
);
  wire s0;
  CompUnsigned #(
    .Bits(4)
  )
  CompUnsigned_i0 (
    .a( 4'b0 ),
    .b( bc ),
    .\= ( s0 )
  );
  assign eq = ~ s0;
endmodule

module hide (
  input ci,
  input di,
  output co,
  output do
);
  assign do = (ci | di);
  assign co = ci;
endmodule

module Mux_8x1_NBits #(
    parameter Bits = 2
)
(
    input [2:0] sel,
    input [(Bits - 1):0] in_0,
    input [(Bits - 1):0] in_1,
    input [(Bits - 1):0] in_2,
    input [(Bits - 1):0] in_3,
    input [(Bits - 1):0] in_4,
    input [(Bits - 1):0] in_5,
    input [(Bits - 1):0] in_6,
    input [(Bits - 1):0] in_7,
    output reg [(Bits - 1):0] out
);
    always @ (*) begin
        case (sel)
            3'h0: out = in_0;
            3'h1: out = in_1;
            3'h2: out = in_2;
            3'h3: out = in_3;
            3'h4: out = in_4;
            3'h5: out = in_5;
            3'h6: out = in_6;
            3'h7: out = in_7;
            default:
                out = 'h0;
        endcase
    end
endmodule


module seg7 (
  input [3:0] e,
  output [6:0] s
);
  wire e_0;
  wire e_1;
  wire e_2;
  wire s0;
  wire s1;
  wire s2;
  wire e_3;
  wire s3;
  assign e_0 = e[0];
  assign e_1 = e[1];
  assign e_2 = e[2];
  assign e_3 = e[3];
  assign s2 = ~ e_3;
  assign s1 = ~ e_2;
  assign s0 = ~ e_1;
  assign s3 = ~ e_0;
  assign s[0] = ((e_0 & s0 & s1 & s2) | (s3 & s0 & e_2) | (s3 & e_2 & e_3));
  assign s[1] = ((e_0 & s0 & e_2) | (s3 & e_1 & e_2) | (s3 & e_1 & e_3) | (s3 & e_2 & e_3));
  assign s[2] = ((s3 & e_1 & s1) | (s3 & e_1 & e_3) | (s0 & e_2 & e_3));
  assign s[3] = ((e_0 & s0 & s1) | (s3 & s0 & e_2 & s2) | (e_0 & e_1 & e_2 & s2) | (s3 & e_1 & e_3) | (e_0 & s1 & e_3));
  assign s[4] = ((e_0 & s2) | (e_0 & s0 & s1) | (s3 & e_1 & e_2 & e_3) | (s0 & e_2 & s2));
  assign s[5] = ((e_0 & s1 & s2) | (e_0 & e_1 & s2) | (s3 & e_1 & e_2 & e_3) | (e_1 & s1 & s2));
  assign s[6] = ((e_0 & e_1 & e_2) | (s0 & s1 & s2) | (e_2 & e_3));
endmodule

module sensor2 (
  input cl,
  input ec,
  input [3:0] m_d,
  input [3:0] m_u,
  input [3:0] s_d,
  input [3:0] s_u,
  output \Tri ,
  output L_4,
  output L_3,
  output L_2,
  output L_1,
  output A,
  output B,
  output C,
  output D,
  output E,
  output F,
  output G,
  output H,
  output VCC,
  output GND,
  output L_8,
  output L_7,
  output L_6,
  output L_5,
  output bell,
  output lec,
  output bu,
  output ev,
  output e_0
);
  wire [19:0] s0;
  wire [8:0] s1;
  wire [3:0] s2;
  wire [3:0] s3;
  wire [3:0] s4;
  wire [3:0] s5;
  wire [3:0] s6;
  wire s7;
  wire [19:0] s8;
  wire [3:0] s9;
  wire s10;
  wire [3:0] s11;
  wire [3:0] s12;
  wire [3:0] s13;
  wire [15:0] s14;
  wire [15:0] s15;
  wire [15:0] s16;
  wire [3:0] s17;
  wire [3:0] s18;
  wire s19;
  wire [2:0] s20;
  wire cen;
  wire s21;
  wire uni;
  wire s22;
  wire s23;
  wire s24;
  wire p2;
  wire s25;
  wire [3:0] s26;
  wire [3:0] s27;
  wire [3:0] s28;
  wire [6:0] s29;
  wire ll;
  wire s30;
  wire [3:0] s31;
  wire s32;
  wire [3:0] s33;
  wire s34;
  wire s35;
  wire s36;
  wire [3:0] s37;
  wire [8:0] s38;
  wire [8:0] s39;
  wire s40;
  wire s41;
  wire ev_temp;
  \f.alc  \f.alc_i0 (
    .s( s14 )
  );
  assign VCC = 1'b1;
  assign GND = 1'b0;
  ctr ctr_i1 (
    .ctr( s37 )
  );
  cntr cntr_i2 (
    .c( ec ),
    .cl( cl ),
    .cn( s0 )
  );
  relojC relojC_i3 (
    .cl( cl ),
    .cn( s8 )
  );
  assign s10 = ~ ec;
  divFl divFl_i4 (
    .cl( cl ),
    .dvcl( s19 )
  );
  distancia distancia_i5 (
    .cn( s0 ),
    .l( s1 ),
    .ld( s2 )
  );
  tpulso tpulso_i6 (
    .l( s8 ),
    .ov( \Tri  )
  );
  cntr4 cntr4_i7 (
    .cld( s19 ),
    .s( s20 )
  );
  \9bitsToBcd  \9bitsToBcd_i8 (
    .l( s1 ),
    .c( s3 ),
    .d( s4 ),
    .u( s5 )
  );
  fraccion fraccion_i9 (
    .b( s2 ),
    .d( s6 )
  );
  Nollego Nollego_i10 (
    .l( s1 ),
    .ov( s7 )
  );
  Demux3 #(
    .Default(0)
  )
  Demux3_i11 (
    .sel( s20 ),
    .in( 1'b1 ),
    .out_0( cen ),
    .out_1( s21 ),
    .out_2( uni ),
    .out_3( s22 ),
    .out_4( s23 ),
    .out_5( s24 ),
    .out_6( p2 ),
    .out_7( s25 )
  );
  DIG_D_FF_Nbit #(
    .Bits(9),
    .Default(0)
  )
  DIG_D_FF_Nbit_i12 (
    .D( s1 ),
    .C( s10 ),
    .Q( s39 )
  );
  assign s15[3:0] = s6;
  assign s15[7:4] = s5;
  assign s15[11:8] = s4;
  assign s15[15:12] = s3;
  DIG_D_FF_1bit #(
    .Default(0)
  )
  DIG_D_FF_1bit_i13 (
    .D( s7 ),
    .C( s10 ),
    .Q( ll )
  );
  assign L_4 = ~ cen;
  assign L_3 = ~ s21;
  assign L_2 = ~ uni;
  assign L_1 = ~ s22;
  CompUnsigned #(
    .Bits(9)
  )
  CompUnsigned_i14 (
    .a( s39 ),
    .b( 9'b11000 ),
    .\= ( s40 ),
    .\< ( s41 )
  );
  assign L_5 = ~ s23;
  assign L_6 = ~ s24;
  assign L_7 = ~ p2;
  assign L_8 = ~ s25;
  Mux_2x1_NBits #(
    .Bits(16)
  )
  Mux_2x1_NBits_i15 (
    .sel( s7 ),
    .in_0( s14 ),
    .in_1( s15 ),
    .out( s16 )
  );
  led_h led_h_i16 (
    .cen( cen ),
    .uni( uni ),
    .ll( ll ),
    .H( s30 )
  );
  assign ev_temp = (s41 | s40);
  Mux_2x1_NBits #(
    .Bits(9)
  )
  Mux_2x1_NBits_i17 (
    .sel( ev_temp ),
    .in_0( 9'b0 ),
    .in_1( s39 ),
    .out( s38 )
  );
  Mux_2x1 Mux_2x1_i18 (
    .sel( p2 ),
    .in_0( s30 ),
    .in_1( 1'b0 ),
    .out( H )
  );
  assign s12 = s16[3:0];
  assign s9 = s16[7:4];
  assign s17 = s16[11:8];
  assign s18 = s16[15:12];
  DIG_D_FF_Nbit #(
    .Bits(4),
    .Default(0)
  )
  DIG_D_FF_Nbit_i19 (
    .D( s9 ),
    .C( s10 ),
    .Q( s11 )
  );
  DIG_D_FF_Nbit #(
    .Bits(4),
    .Default(0)
  )
  DIG_D_FF_Nbit_i20 (
    .D( s12 ),
    .C( s10 ),
    .Q( s13 )
  );
  DIG_D_FF_Nbit #(
    .Bits(4),
    .Default(0)
  )
  DIG_D_FF_Nbit_i21 (
    .D( s18 ),
    .C( s10 ),
    .Q( s33 )
  );
  DIG_D_FF_Nbit #(
    .Bits(4),
    .Default(0)
  )
  DIG_D_FF_Nbit_i22 (
    .D( s17 ),
    .C( s10 ),
    .Q( s31 )
  );
  buzzer buzzer_i23 (
    .cl( cl ),
    .d( s38 ),
    .bu( bu ),
    .e_0( e_0 )
  );
  eq eq_i24 (
    .bc( s31 ),
    .eq( s32 )
  );
  eq eq_i25 (
    .bc( s33 ),
    .eq( s34 )
  );
  hide hide_i26 (
    .ci( s34 ),
    .di( s32 ),
    .co( s35 ),
    .do( s36 )
  );
  Mux_2x1_NBits #(
    .Bits(4)
  )
  Mux_2x1_NBits_i27 (
    .sel( s35 ),
    .in_0( s37 ),
    .in_1( s33 ),
    .out( s26 )
  );
  Mux_2x1_NBits #(
    .Bits(4)
  )
  Mux_2x1_NBits_i28 (
    .sel( s36 ),
    .in_0( s37 ),
    .in_1( s31 ),
    .out( s27 )
  );
  Mux_8x1_NBits #(
    .Bits(4)
  )
  Mux_8x1_NBits_i29 (
    .sel( s20 ),
    .in_0( s26 ),
    .in_1( s27 ),
    .in_2( s11 ),
    .in_3( s13 ),
    .in_4( s_u ),
    .in_5( s_d ),
    .in_6( m_u ),
    .in_7( m_d ),
    .out( s28 )
  );
  seg7 seg7_i30 (
    .e( s28 ),
    .s( s29 )
  );
  assign A = s29[0];
  assign B = s29[1];
  assign C = s29[2];
  assign D = s29[3];
  assign E = s29[4];
  assign F = s29[5];
  assign G = s29[6];
  assign lec = ec;
  assign ev = ev_temp;
endmodule

module counting (
  input t,
  input c,
  input cl,
  input seg,
  output cu,
  output te,
  output ad
);
  wire cu_temp;
  wire s0;
  wire s1;
  wire te_temp;
  wire s2;
  wire [4:0] s3;
  wire s4;
  wire s5;
  wire s6;
  wire s7;
  wire [4:0] s8;
  wire s9;
  assign s0 = ((~ t & c) | (cu_temp & c) | (~ t & cu_temp));
  assign s1 = (((cu_temp & ~ c & t) | s4) ^ te_temp);
  assign s5 = (((cu_temp & ~ c & t) | s9) ^ s6);
  DIG_D_FF_1bit #(
    .Default(0)
  )
  DIG_D_FF_1bit_i0 (
    .D( s0 ),
    .C( cl ),
    .Q( cu_temp )
  );
  DIG_D_FF_1bit #(
    .Default(0)
  )
  DIG_D_FF_1bit_i1 (
    .D( s1 ),
    .C( cl ),
    .Q( te_temp )
  );
  DIG_D_FF_1bit #(
    .Default(0)
  )
  DIG_D_FF_1bit_i2 (
    .D( s5 ),
    .C( cl ),
    .Q( s6 )
  );
  assign s2 = ~ te_temp;
  assign s7 = ~ s6;
  assign ad = (~ te_temp & s6);
  DIG_Counter_Nbit #(
    .Bits(5)
  )
  DIG_Counter_Nbit_i3 (
    .en( te_temp ),
    .C( seg ),
    .clr( s2 ),
    .out( s3 )
  );
  DIG_Counter_Nbit #(
    .Bits(5)
  )
  DIG_Counter_Nbit_i4 (
    .en( s6 ),
    .C( seg ),
    .clr( s7 ),
    .out( s8 )
  );
  CompUnsigned #(
    .Bits(5)
  )
  CompUnsigned_i5 (
    .a( s3 ),
    .b( 5'b1001 ),
    .\> ( s4 )
  );
  CompUnsigned #(
    .Bits(5)
  )
  CompUnsigned_i6 (
    .a( s8 ),
    .b( 5'b10011 ),
    .\> ( s9 )
  );
  assign cu = cu_temp;
  assign te = te_temp;
endmodule

module \11bitsToBcd  (
  input [10:0] l,
  output [3:0] m,
  output [3:0] c,
  output [3:0] d,
  output [3:0] u
);
  wire [3:0] s0;
  wire [3:0] s1;
  wire [3:0] s2;
  wire [3:0] s3;
  wire [3:0] s4;
  wire [3:0] s5;
  wire [3:0] s6;
  wire [3:0] s7;
  wire [3:0] s8;
  wire [3:0] s9;
  wire [3:0] s10;
  wire [3:0] s11;
  wire [3:0] s12;
  wire [3:0] s13;
  wire [3:0] s14;
  wire [3:0] s15;
  wire [3:0] s16;
  wire [3:0] s17;
  wire [3:0] s18;
  wire [3:0] s19;
  wire [3:0] s20;
  wire [3:0] s21;
  wire [3:0] s22;
  wire [3:0] s23;
  wire [3:0] s24;
  wire [3:0] s25;
  wire [3:0] s26;
  wire [3:0] s27;
  wire [3:0] s28;
  wire [3:0] s29;
  assign s0[0] = l[8];
  assign s0[1] = l[9];
  assign s0[2] = l[10];
  assign s0[3] = 1'b0;
  bitsToBcd bitsToBcd_i0 (
    .b( s0 ),
    .d( s1 )
  );
  assign s2[0] = l[7];
  assign s2[1] = s1[0];
  assign s2[2] = s1[1];
  assign s2[3] = s1[2];
  bitsToBcd bitsToBcd_i1 (
    .b( s2 ),
    .d( s3 )
  );
  assign s4[0] = l[6];
  assign s4[1] = s3[0];
  assign s4[2] = s3[1];
  assign s4[3] = s3[2];
  bitsToBcd bitsToBcd_i2 (
    .b( s4 ),
    .d( s5 )
  );
  assign s6[0] = l[5];
  assign s6[1] = s5[0];
  assign s6[2] = s5[1];
  assign s6[3] = s5[2];
  assign s28[0] = s5[3];
  assign s28[1] = s3[3];
  assign s28[2] = s1[3];
  assign s28[3] = 1'b0;
  bitsToBcd bitsToBcd_i3 (
    .b( s6 ),
    .d( s7 )
  );
  bitsToBcd bitsToBcd_i4 (
    .b( s28 ),
    .d( s29 )
  );
  assign s8[0] = l[4];
  assign s8[1] = s7[0];
  assign s8[2] = s7[1];
  assign s8[3] = s7[2];
  assign s22[0] = s7[3];
  assign s22[1] = s29[0];
  assign s22[2] = s29[1];
  assign s22[3] = s29[2];
  bitsToBcd bitsToBcd_i5 (
    .b( s8 ),
    .d( s9 )
  );
  bitsToBcd bitsToBcd_i6 (
    .b( s22 ),
    .d( s23 )
  );
  assign s10[0] = l[3];
  assign s10[1] = s9[0];
  assign s10[2] = s9[1];
  assign s10[3] = s9[2];
  assign s20[0] = s9[3];
  assign s20[1] = s23[0];
  assign s20[2] = s23[1];
  assign s20[3] = s23[2];
  bitsToBcd bitsToBcd_i7 (
    .b( s10 ),
    .d( s11 )
  );
  bitsToBcd bitsToBcd_i8 (
    .b( s20 ),
    .d( s21 )
  );
  assign s12[0] = l[2];
  assign s12[1] = s11[0];
  assign s12[2] = s11[1];
  assign s12[3] = s11[2];
  assign s18[0] = s11[3];
  assign s18[1] = s21[0];
  assign s18[2] = s21[1];
  assign s18[3] = s21[2];
  assign s26[0] = s21[3];
  assign s26[1] = s23[3];
  assign s26[2] = s29[3];
  assign s26[3] = 1'b0;
  bitsToBcd bitsToBcd_i9 (
    .b( s12 ),
    .d( s13 )
  );
  bitsToBcd bitsToBcd_i10 (
    .b( s18 ),
    .d( s19 )
  );
  bitsToBcd bitsToBcd_i11 (
    .b( s26 ),
    .d( s27 )
  );
  assign s14[0] = l[1];
  assign s14[1] = s13[0];
  assign s14[2] = s13[1];
  assign s14[3] = s13[2];
  assign s16[0] = s13[3];
  assign s16[1] = s19[0];
  assign s16[2] = s19[1];
  assign s16[3] = s19[2];
  assign s24[0] = s19[3];
  assign s24[1] = s27[0];
  assign s24[2] = s27[1];
  assign s24[3] = s27[2];
  bitsToBcd bitsToBcd_i12 (
    .b( s14 ),
    .d( s15 )
  );
  bitsToBcd bitsToBcd_i13 (
    .b( s16 ),
    .d( s17 )
  );
  bitsToBcd bitsToBcd_i14 (
    .b( s24 ),
    .d( s25 )
  );
  assign u[0] = l[0];
  assign u[1] = s15[0];
  assign u[2] = s15[1];
  assign u[3] = s15[2];
  assign c[0] = s17[3];
  assign c[1] = s25[0];
  assign c[2] = s25[1];
  assign c[3] = s25[2];
  assign d[0] = s15[3];
  assign d[1] = s17[0];
  assign d[2] = s17[1];
  assign d[3] = s17[2];
  assign m[0] = s25[3];
  assign m[1] = s27[3];
  assign m[2] = 1'b0;
  assign m[3] = 1'b0;
endmodule

module precio2 (
  input cl,
  input cu,
  input clr,
  output [3:0] s_d,
  output [3:0] s_u,
  output [3:0] m_d,
  output [3:0] m_u,
  output [3:0] h_d,
  output [3:0] h_u,
  output [3:0] cm_m,
  output [3:0] cm_c,
  output [3:0] cm_d,
  output [3:0] cm_u
);
  wire s0;
  wire s1;
  wire [26:0] s2;
  wire s3;
  wire s4;
  wire s5;
  wire s6;
  wire s7;
  wire s8;
  wire s9;
  wire s10;
  wire [8:0] s11;
  wire s12;
  wire s13;
  wire s14;
  wire s15;
  wire s16;
  wire s17;
  wire [8:0] s18;
  wire s19;
  wire s20;
  wire s21;
  wire s22;
  wire s23;
  wire s24;
  wire [8:0] s25;
  wire s26;
  wire s27;
  wire s28;
  wire s29;
  wire [10:0] s30;
  wire s31;
  wire [10:0] s32;
  wire [3:0] s33;
  wire [3:0] s34;
  wire [3:0] s35;
  wire [3:0] s36;
  wire [3:0] s37;
  wire [3:0] s38;
  wire [3:0] s39;
  wire [3:0] s40;
  wire [3:0] s41;
  wire [3:0] s42;
  DIG_D_FF_1bit #(
    .Default(0)
  )
  DIG_D_FF_1bit_i0 (
    .D( cu ),
    .C( cl ),
    .Q( s5 )
  );
  assign s6 = ~ s5;
  assign s7 = (cl & ~ (~ s5 & cl & cu));
  assign s0 = (s4 & s5);
  Mux_2x1 Mux_2x1_i1 (
    .sel( s6 ),
    .in_0( s3 ),
    .in_1( s7 ),
    .out( s8 )
  );
  assign s9 = (s12 & ~ s6);
  assign s10 = ((clr & (~ s9 & s5)) | (~ clr & (~ s9 & s5)) | (clr & (~ s9 & ~ s5)));
  Mux_2x1 Mux_2x1_i2 (
    .sel( s6 ),
    .in_0( s14 ),
    .in_1( s7 ),
    .out( s15 )
  );
  assign s16 = (s19 & ~ s6);
  assign s17 = ((clr & (~ s16 & s5)) | (~ clr & (~ s16 & s5)) | (clr & (~ s16 & ~ s5)));
  Mux_2x1 Mux_2x1_i3 (
    .sel( s6 ),
    .in_0( s21 ),
    .in_1( s7 ),
    .out( s22 )
  );
  assign s23 = (s26 & ~ s6);
  assign s24 = ((clr & (~ s23 & s5)) | (~ clr & (~ s23 & s5)) | (clr & (~ s23 & ~ s5)));
  Mux_2x1 Mux_2x1_i4 (
    .sel( s6 ),
    .in_0( s13 ),
    .in_1( s7 ),
    .out( s27 )
  );
  assign s28 = (s31 & ~ s6);
  assign s29 = ((clr & (~ s28 & s5)) | (~ clr & (~ s28 & s5)) | (clr & (~ s28 & ~ s5)));
  DIG_Counter_Nbit #(
    .Bits(9)
  )
  DIG_Counter_Nbit_i5 (
    .en( s9 ),
    .C( s8 ),
    .clr( s10 ),
    .out( s11 )
  );
  assign s1 = ~ s0;
  DIG_Counter_Nbit #(
    .Bits(9)
  )
  DIG_Counter_Nbit_i6 (
    .en( s16 ),
    .C( s15 ),
    .clr( s17 ),
    .out( s18 )
  );
  DIG_Counter_Nbit #(
    .Bits(9)
  )
  DIG_Counter_Nbit_i7 (
    .en( s23 ),
    .C( s22 ),
    .clr( s24 ),
    .out( s25 )
  );
  DIG_Counter_Nbit #(
    .Bits(11)
  )
  DIG_Counter_Nbit_i8 (
    .en( s28 ),
    .C( s27 ),
    .clr( s29 ),
    .out( s30 )
  );
  DIG_Counter_Nbit #(
    .Bits(27)
  )
  DIG_Counter_Nbit_i9 (
    .en( s0 ),
    .C( cl ),
    .clr( s1 ),
    .out( s2 )
  );
  CompUnsigned #(
    .Bits(9)
  )
  CompUnsigned_i10 (
    .a( s11 ),
    .b( 9'b111011 ),
    .\= ( s13 ),
    .\< ( s12 )
  );
  CompUnsigned #(
    .Bits(9)
  )
  CompUnsigned_i11 (
    .a( s18 ),
    .b( 9'b111011 ),
    .\= ( s20 ),
    .\< ( s19 )
  );
  CompUnsigned #(
    .Bits(9)
  )
  CompUnsigned_i12 (
    .a( s25 ),
    .b( 9'b11101 ),
    .\< ( s26 )
  );
  CompUnsigned #(
    .Bits(11)
  )
  CompUnsigned_i13 (
    .a( s30 ),
    .b( 11'b11100001000 ),
    .\< ( s31 )
  );
  DIG_Add #(
    .Bits(11)
  )
  DIG_Add_i14 (
    .a( s30 ),
    .b( 11'b1 ),
    .c_i( 1'b0 ),
    .s( s32 )
  );
  \9bitsToBcd  \9bitsToBcd_i15 (
    .l( s11 ),
    .d( s37 ),
    .u( s38 )
  );
  \9bitsToBcd  \9bitsToBcd_i16 (
    .l( s25 ),
    .d( s39 ),
    .u( s40 )
  );
  \9bitsToBcd  \9bitsToBcd_i17 (
    .l( s18 ),
    .d( s41 ),
    .u( s42 )
  );
  CompUnsigned #(
    .Bits(27)
  )
  CompUnsigned_i18 (
    .a( s2 ),
    .b( 27'b10111110101111000010000000 ),
    .\= ( s3 ),
    .\< ( s4 )
  );
  \11bitsToBcd  \11bitsToBcd_i19 (
    .l( s32 ),
    .m( s33 ),
    .c( s34 ),
    .d( s35 ),
    .u( s36 )
  );
  DIG_D_FF_Nbit #(
    .Bits(4),
    .Default(0)
  )
  DIG_D_FF_Nbit_i20 (
    .D( s37 ),
    .C( s8 ),
    .Q( s_d )
  );
  DIG_D_FF_Nbit #(
    .Bits(4),
    .Default(0)
  )
  DIG_D_FF_Nbit_i21 (
    .D( s38 ),
    .C( s8 ),
    .Q( s_u )
  );
  DIG_D_FF_Nbit #(
    .Bits(4),
    .Default(0)
  )
  DIG_D_FF_Nbit_i22 (
    .D( s39 ),
    .C( s8 ),
    .Q( h_d )
  );
  DIG_D_FF_Nbit #(
    .Bits(4),
    .Default(0)
  )
  DIG_D_FF_Nbit_i23 (
    .D( s40 ),
    .C( s8 ),
    .Q( h_u )
  );
  DIG_D_FF_Nbit #(
    .Bits(4),
    .Default(0)
  )
  DIG_D_FF_Nbit_i24 (
    .D( s41 ),
    .C( s8 ),
    .Q( m_d )
  );
  DIG_D_FF_Nbit #(
    .Bits(4),
    .Default(0)
  )
  DIG_D_FF_Nbit_i25 (
    .D( s42 ),
    .C( s8 ),
    .Q( m_u )
  );
  DIG_D_FF_1bit #(
    .Default(0)
  )
  DIG_D_FF_1bit_i26 (
    .D( s13 ),
    .C( s8 ),
    .Q( s14 )
  );
  DIG_D_FF_1bit #(
    .Default(0)
  )
  DIG_D_FF_1bit_i27 (
    .D( s20 ),
    .C( s8 ),
    .Q( s21 )
  );
  DIG_D_FF_Nbit #(
    .Bits(4),
    .Default(0)
  )
  DIG_D_FF_Nbit_i28 (
    .D( s33 ),
    .C( s8 ),
    .Q( cm_m )
  );
  DIG_D_FF_Nbit #(
    .Bits(4),
    .Default(0)
  )
  DIG_D_FF_Nbit_i29 (
    .D( s34 ),
    .C( s8 ),
    .Q( cm_c )
  );
  DIG_D_FF_Nbit #(
    .Bits(4),
    .Default(0)
  )
  DIG_D_FF_Nbit_i30 (
    .D( s35 ),
    .C( s8 ),
    .Q( cm_d )
  );
  DIG_D_FF_Nbit #(
    .Bits(4),
    .Default(0)
  )
  DIG_D_FF_Nbit_i31 (
    .D( s36 ),
    .C( s8 ),
    .Q( cm_u )
  );
endmodule

module guarda (
  input gu,
  input [3:0] gs_d,
  input [3:0] gs_u,
  input [3:0] gm_d,
  input [3:0] gm_u,
  input [3:0] gh_d,
  input [3:0] gh_u,
  input [3:0] gcm_m,
  input [3:0] gcm_c,
  input [3:0] gcm_d,
  input [3:0] gcm_u,
  output [3:0] s_d,
  output [3:0] s_u,
  output [3:0] m_d,
  output [3:0] m_u,
  output [3:0] h_d,
  output [3:0] h_u,
  output [3:0] cm_m,
  output [3:0] cm_c,
  output [3:0] cm_d,
  output [3:0] cm_u
);
  DIG_D_FF_Nbit #(
    .Bits(4),
    .Default(0)
  )
  DIG_D_FF_Nbit_i0 (
    .D( gs_d ),
    .C( gu ),
    .Q( s_d )
  );
  DIG_D_FF_Nbit #(
    .Bits(4),
    .Default(0)
  )
  DIG_D_FF_Nbit_i1 (
    .D( gs_u ),
    .C( gu ),
    .Q( s_u )
  );
  DIG_D_FF_Nbit #(
    .Bits(4),
    .Default(0)
  )
  DIG_D_FF_Nbit_i2 (
    .D( gm_d ),
    .C( gu ),
    .Q( m_d )
  );
  DIG_D_FF_Nbit #(
    .Bits(4),
    .Default(0)
  )
  DIG_D_FF_Nbit_i3 (
    .D( gm_u ),
    .C( gu ),
    .Q( m_u )
  );
  DIG_D_FF_Nbit #(
    .Bits(4),
    .Default(0)
  )
  DIG_D_FF_Nbit_i4 (
    .D( gh_d ),
    .C( gu ),
    .Q( h_d )
  );
  DIG_D_FF_Nbit #(
    .Bits(4),
    .Default(0)
  )
  DIG_D_FF_Nbit_i5 (
    .D( gh_u ),
    .C( gu ),
    .Q( h_u )
  );
  DIG_D_FF_Nbit #(
    .Bits(4),
    .Default(0)
  )
  DIG_D_FF_Nbit_i6 (
    .D( gcm_m ),
    .C( gu ),
    .Q( cm_m )
  );
  DIG_D_FF_Nbit #(
    .Bits(4),
    .Default(0)
  )
  DIG_D_FF_Nbit_i7 (
    .D( gcm_c ),
    .C( gu ),
    .Q( cm_c )
  );
  DIG_D_FF_Nbit #(
    .Bits(4),
    .Default(0)
  )
  DIG_D_FF_Nbit_i8 (
    .D( gcm_d ),
    .C( gu ),
    .Q( cm_d )
  );
  DIG_D_FF_Nbit #(
    .Bits(4),
    .Default(0)
  )
  DIG_D_FF_Nbit_i9 (
    .D( gcm_u ),
    .C( gu ),
    .Q( cm_u )
  );
endmodule

module a90 (
  output [19:0] a_90
);
  assign a_90 = 20'b11111000000011000;
endmodule

module ms20 (
  output [19:0] ms_20
);
  assign ms_20 = 20'b11110100001001000000;
endmodule

module a0 (
  output [19:0] a_0
);
  assign a_0 = 20'b10100110111111100;
endmodule

module Demux1
#(
    parameter Default = 0 
)
(
    output out_0,
    output out_1,
    input [0:0] sel,
    input in
);
    assign out_0 = (sel == 1'h0)? in : Default;
    assign out_1 = (sel == 1'h1)? in : Default;
endmodule


module motor (
  input cl,
  input m,
  output smd,
  output vccm,
  output gndm,
  output l_01,
  output l_00
);
  wire [19:0] s0;
  wire [19:0] s1;
  wire [19:0] s2;
  wire [19:0] s3;
  wire s4;
  wire s5;
  wire [19:0] s6;
  wire s7;
  wire s8;
  wire s9;
  a90 a90_i0 (
    .a_90( s1 )
  );
  ms20 ms20_i1 (
    .ms_20( s6 )
  );
  a0 a0_i2 (
    .a_0( s0 )
  );
  assign vccm = 1'b1;
  assign gndm = 1'b0;
  Mux_2x1_NBits #(
    .Bits(20)
  )
  Mux_2x1_NBits_i3 (
    .sel( m ),
    .in_0( s0 ),
    .in_1( s1 ),
    .out( s2 )
  );
  Demux1 #(
    .Default(0)
  )
  Demux1_i4 (
    .sel( m ),
    .in( 1'b1 ),
    .out_0( s8 ),
    .out_1( s9 )
  );
  assign l_00 = ~ s8;
  assign l_01 = ~ s9;
  CompUnsigned #(
    .Bits(20)
  )
  CompUnsigned_i5 (
    .a( s3 ),
    .b( s2 ),
    .\< ( smd )
  );
  CompUnsigned #(
    .Bits(20)
  )
  CompUnsigned_i6 (
    .a( s3 ),
    .b( s6 ),
    .\< ( s7 )
  );
  DIG_D_FF_1bit #(
    .Default(0)
  )
  DIG_D_FF_1bit_i7 (
    .D( s7 ),
    .C( cl ),
    .Q( s4 )
  );
  assign s5 = ~ s4;
  DIG_Counter_Nbit #(
    .Bits(20)
  )
  DIG_Counter_Nbit_i8 (
    .en( s4 ),
    .C( cl ),
    .clr( s5 ),
    .out( s3 )
  );
endmodule

module top (
  input ec,
  input cl,
  input co,
  input t,
  output led_v,
  output led_r,
  output bu,
  output smd,
  output vccm,
  output gndm,
  output \Tri ,
  output L_4,
  output L_3,
  output L_2,
  output L_1,
  output A,
  output B,
  output C,
  output D,
  output E,
  output F,
  output G,
  output H,
  output VCC,
  output GND,
  output L_8,
  output L_7,
  output L_6,
  output L_5,
  output bell,
  output lec,
  output seg,
  output ca,
  output cu,
  output e_1,
  output e_2,
  output e_3,
  output e_4
);
  wire [3:0] m_d;
  wire [3:0] m_u;
  wire [3:0] s_d;
  wire [3:0] s_u;
  wire s0;
  wire s1;
  wire s2;
  wire s3;
  wire s4;
  wire s5;
  wire pal;
  wire s6;
  wire s7;
  wire s8;
  wire s9;
  wire seg_temp;
  wire cun;
  wire s10;
  wire s11;
  wire s12;
  wire s13;
  wire s14;
  wire s15;
  wire prebu;
  wire [3:0] s16;
  wire [3:0] s17;
  wire [3:0] s18;
  wire [3:0] s19;
  wire [3:0] s20;
  wire [3:0] s21;
  wire [3:0] s22;
  wire [3:0] s23;
  wire [3:0] s24;
  wire [3:0] s25;
  wire [3:0] s26;
  wire [3:0] s27;
  wire [3:0] s28;
  wire [3:0] s29;
  cuarto_s cuarto_s_i0 (
    .cl( cl ),
    .dvcl( s6 )
  );
  seg seg_i1 (
    .cl_in( cl ),
    .cl_o( seg_temp )
  );
  sensor2 sensor2_i2 (
    .cl( cl ),
    .ec( ec ),
    .m_d( m_d ),
    .m_u( m_u ),
    .s_d( s_d ),
    .s_u( s_u ),
    .\Tri ( \Tri  ),
    .L_4( L_4 ),
    .L_3( L_3 ),
    .L_2( L_2 ),
    .L_1( L_1 ),
    .A( A ),
    .B( B ),
    .C( C ),
    .D( D ),
    .E( E ),
    .F( F ),
    .G( G ),
    .H( H ),
    .VCC( VCC ),
    .GND( GND ),
    .L_8( L_8 ),
    .L_7( L_7 ),
    .L_6( L_6 ),
    .L_5( L_5 ),
    .bell( bell ),
    .lec( lec ),
    .bu( s0 ),
    .ev( s1 ),
    .e_0( s2 )
  );
  Mux_2x1 Mux_2x1_i3 (
    .sel( pal ),
    .in_0( 1'b1 ),
    .in_1( s6 ),
    .out( s7 )
  );
  counting counting_i4 (
    .t( s8 ),
    .c( s9 ),
    .cl( cl ),
    .seg( seg_temp ),
    .cu( cun ),
    .te( s10 ),
    .ad( s11 )
  );
  assign s9 = (co & s5);
  assign s8 = (t & s5);
  assign s3 = (s1 & ~ s2);
  assign s5 = (s1 & s2);
  assign led_r = (s7 & s1);
  assign s12 = ~ cun;
  assign led_v = ~ s1;
  assign cu = ~ cun;
  Mux_2x1 Mux_2x1_i5 (
    .sel( s1 ),
    .in_0( 1'b0 ),
    .in_1( s0 ),
    .out( s13 )
  );
  assign s15 = (cl & ~ cun);
  assign prebu = (~ cun & cl);
  precio2 precio2_i6 (
    .cl( cl ),
    .cu( cun ),
    .clr( s11 ),
    .s_d( s16 ),
    .s_u( s17 ),
    .m_d( s18 ),
    .m_u( s19 ),
    .h_d( s20 ),
    .h_u( s21 ),
    .cm_m( s22 ),
    .cm_c( s23 ),
    .cm_d( s24 ),
    .cm_u( s25 )
  );
  assign e_1 = ~ (~ s10 & ~ cun & ~ s11);
  assign e_2 = ~ cun;
  assign e_3 = ~ s10;
  assign e_4 = ~ s11;
  assign s14 = (s12 & s13);
  assign ca = ~ s5;
  assign pal = (s12 & s5);
  DIG_D_FF_1bit #(
    .Default(0)
  )
  DIG_D_FF_1bit_i7 (
    .D( s3 ),
    .C( s15 ),
    .Q( s4 )
  );
  guarda guarda_i8 (
    .gu( s10 ),
    .gs_d( s16 ),
    .gs_u( s17 ),
    .gm_d( s18 ),
    .gm_u( s19 ),
    .gh_d( s20 ),
    .gh_u( s21 ),
    .gcm_m( s22 ),
    .gcm_c( s23 ),
    .gcm_d( s24 ),
    .gcm_u( s25 ),
    .s_d( s26 ),
    .s_u( s27 ),
    .m_d( s28 ),
    .m_u( s29 )
  );
  motor motor_i9 (
    .cl( cl ),
    .m( s4 ),
    .smd( smd ),
    .vccm( vccm ),
    .gndm( gndm )
  );
  DIG_D_FF_1bit #(
    .Default(0)
  )
  DIG_D_FF_1bit_i10 (
    .D( s14 ),
    .C( prebu ),
    .Q( bu )
  );
  Mux_2x1_NBits #(
    .Bits(4)
  )
  Mux_2x1_NBits_i11 (
    .sel( s10 ),
    .in_0( s17 ),
    .in_1( s27 ),
    .out( s_u )
  );
  Mux_2x1_NBits #(
    .Bits(4)
  )
  Mux_2x1_NBits_i12 (
    .sel( s10 ),
    .in_0( s18 ),
    .in_1( s28 ),
    .out( m_d )
  );
  Mux_2x1_NBits #(
    .Bits(4)
  )
  Mux_2x1_NBits_i13 (
    .sel( s10 ),
    .in_0( s19 ),
    .in_1( s29 ),
    .out( m_u )
  );
  Mux_2x1_NBits #(
    .Bits(4)
  )
  Mux_2x1_NBits_i14 (
    .sel( s10 ),
    .in_0( s16 ),
    .in_1( s26 ),
    .out( s_d )
  );
  assign seg = seg_temp;
endmodule


module LCD_TOP	(
                 cl,  //50 MZ
                 LCD_RW,   //LCD Read/Write Select, 0 = Write, 1 = Read
                 LCD_EN,   //LCD Enable
                 LCD_RS,   //LCD Command/Data Select, 0 = Command, 1 = Data
                 LCD_DATA, //LCD Data bus 8 bits
                 senal_1,
                 senal_2,
                 senal_3,
                 senal_4
					);


reg [8:0] Mostrar_10 = "H";
reg [8:0] Mostrar_11 = "O";
reg [8:0] Mostrar_12 = "L";
reg [8:0] Mostrar_13 = "A";
reg [8:0] Mostrar_14 = " ";
reg [8:0] Mostrar_15 = "M";
reg [8:0] Mostrar_16 = "U";
reg [8:0] Mostrar_17 = "N";
reg [8:0] Mostrar_18 = "D";
reg [8:0] Mostrar_19 = "O";
reg [8:0] Mostrar_110 = " ";
reg [8:0] Mostrar_111 = "L";
reg [8:0] Mostrar_112 = "I";
reg [8:0] Mostrar_113 = "N";
reg [8:0] Mostrar_114 = "E";
reg [8:0] Mostrar_115 = "1";
reg [8:0] Mostrar_20 = "P";
reg [8:0] Mostrar_21 = "R";
reg [8:0] Mostrar_22 = "U";
reg [8:0] Mostrar_23 = "E";
reg [8:0] Mostrar_24 = "B";
reg [8:0] Mostrar_25 = "A";
reg [8:0] Mostrar_26 = " ";
reg [8:0] Mostrar_27 = "L";
reg [8:0] Mostrar_28 = "I";
reg [8:0] Mostrar_29 = "N";
reg [8:0] Mostrar_210 = "E";
reg [8:0] Mostrar_211 = "A";
reg [8:0] Mostrar_212 = " ";
reg [8:0] Mostrar_213 = "2";
reg [8:0] Mostrar_214 = " ";
reg [8:0] Mostrar_215 = " ";               


input cl;       //50 MHz
inout [7:0] LCD_DATA; //LCD Data bus 8 bits
input senal_1;
input senal_2;
input senal_3;
input senal_4;

output LCD_RW;        //LCD Read/Write Select, 0 = Write, 1 = Read
output LCD_EN;        //LCD Enable
output LCD_RS;        //LCD Command/Data Select, 0 = Command, 1 = Data


top top_instance (.cl(cl),
                  .e_1(senal_1),
                  .e_2(senal_2),
                  .e_3(senal_3),
                  .e_4(senal_4));

wire DLY_RST;


Reset_Delay r0 ( .iCLK(cl),.oRESET(DLY_RST)    );

always @ (cl)begin

if (senal_1 == 1'b1) begin
		Mostrar_10<=9'h120;//ESP
      Mostrar_11<=9'h142;//B
      Mostrar_12<=9'h149;//I
      Mostrar_13<=9'h145;//E
      Mostrar_14<=9'h14E;//N
      Mostrar_15<=9'h156;//V
      Mostrar_16<=9'h145;//E
      Mostrar_17<=9'h14E;//N
      Mostrar_18<=9'h149;//I
      Mostrar_19<=9'h144;//D
      Mostrar_110<=9'h14F;//O
      Mostrar_111<=9'h120;//ESP
      Mostrar_112<=9'h120;//ESP
      Mostrar_113<=9'h120;//ESP
      Mostrar_114<=9'h120;//ESP
      Mostrar_115<=9'h120;//ESP
      Mostrar_20<=9'h144;//D
      Mostrar_21<=9'h149;//I
      Mostrar_22<=9'h153;//S
      Mostrar_23<=9'h150;//P
      Mostrar_24<=9'h14F;//O
      Mostrar_25<=9'h149;//I
      Mostrar_26<=9'h14E;//N
      Mostrar_27<=9'h149;//I
      Mostrar_28<=9'h142;//B
      Mostrar_29<=9'h14C;//L
      Mostrar_210<=9'h145;//E
      Mostrar_211<=9'h120;//ESP
      Mostrar_212<=9'h120;//ESP
      Mostrar_213<=9'h120;//ESP
      Mostrar_214<=9'h120;//ESP
      Mostrar_215<=9'h120;//ESP
end
if (senal_2 == 1'b1) begin
		Mostrar_10<=9'h120;//ESP
      Mostrar_11<=9'h143;//C
      Mostrar_12<=9'h14F;//O
		Mostrar_13<=9'h14E;//N
      Mostrar_14<=9'h154;//T
      Mostrar_15<=9'h141;//A
      Mostrar_16<=9'h14E;//N
      Mostrar_17<=9'h144;//D
      Mostrar_18<=9'h14F;//O
      Mostrar_19<=9'h120;//ESP
      Mostrar_110<=9'h120;//ESP
      Mostrar_111<=9'h120;//ESP
      Mostrar_112<=9'h120;//ESP
      Mostrar_114<=9'h120;//ESP
      Mostrar_115<=9'h120;//ESP
      Mostrar_20<=9'h120;//ESP
      Mostrar_21<=9'h154;//T
      Mostrar_22<=9'h149;//I
      Mostrar_113<=9'h120;//ESP
      Mostrar_23<=9'h145;//E
      Mostrar_24<=9'h14D;//M
      Mostrar_25<=9'h150;//P
      Mostrar_26<=9'h14F;//O
      Mostrar_27<=9'h120;//ESP
      Mostrar_28<=9'h120;//ESP
      Mostrar_29<=9'h120;//ESP
      Mostrar_210<=9'h120; //ESP
      Mostrar_211<=9'h120;//ESP
      Mostrar_212<=9'h120;//ESP
      Mostrar_213<=9'h120;//ESP
      Mostrar_214<=9'h120;//ESP
      Mostrar_215<=9'h120;//ESP
end
if (senal_3 == 1'b1) begin
		Mostrar_10<=9'h120;//ESP
      Mostrar_11<=9'h150;//P
      Mostrar_12<=9'h14F;//O
      Mostrar_13<=9'h152;//R
      Mostrar_14<=9'h120;//ESP
      Mostrar_15<=9'h146;//F
      Mostrar_16<=9'h141;//A
      Mostrar_17<=9'h156;//V
      Mostrar_18<=9'h14F;//O
      Mostrar_19<=9'h152;//R
      Mostrar_110<=9'h120;//ESP
      Mostrar_111<=9'h150;//P
      Mostrar_112<=9'h141;//A
      Mostrar_113<=9'h147;//G
      Mostrar_114<=9'h141;//A
      Mostrar_115<=9'h152;//R
      Mostrar_20<=9'h120;//ESP
      Mostrar_21<=9'h120;//ESP
      Mostrar_22<=9'h120;//ESP
      Mostrar_23<=9'h120;//ESP
      Mostrar_24<=9'h120;//ESP
      Mostrar_25<=9'h120;//ESP
      Mostrar_26<=9'h120;//ESP
      Mostrar_27<=9'h120;//ESP
      Mostrar_28<=9'h120;//ESP
      Mostrar_29<=9'h120;//ESP
      Mostrar_210<=9'h120; //ESP
      Mostrar_211<=9'h120;//ESP
      Mostrar_212<=9'h120;//ESP
      Mostrar_213<=9'h120;//ESP
      Mostrar_214<=9'h120;//ESP
      Mostrar_215<=9'h120;//ESP
end
	
if (senal_4 == 1'b1) begin
		Mostrar_10<=9'h120;//ESP
      Mostrar_11<=9'h147;//G
      Mostrar_12<=9'h152;//R
      Mostrar_13<=9'h141;//A
      Mostrar_14<=9'h143;//C
      Mostrar_15<=9'h149;//I
      Mostrar_16<=9'h141;//A
      Mostrar_17<=9'h153;//S
      Mostrar_18<=9'h120;//ESP
      Mostrar_19<=9'h120;//ESP
      Mostrar_110<=9'h120;//ESP
      Mostrar_111<=9'h120;//ESP
      Mostrar_112<=9'h120;//ESP
      Mostrar_113<=9'h120;//ESP
      Mostrar_114<=9'h120;//ESP
      Mostrar_115<=9'h120;//ESP
      Mostrar_20<=9'h120;//ESP
      Mostrar_21<=9'h156;//V
      Mostrar_22<=9'h155;//U
      Mostrar_23<=9'h145;//E
      Mostrar_24<=9'h14C;//L
      Mostrar_25<=9'h156;//V
      Mostrar_26<=9'h141;//A
      Mostrar_27<=9'h120;//ESP
      Mostrar_28<=9'h150;//P
      Mostrar_29<=9'h152;//R
      Mostrar_210<=9'h14F;//O
      Mostrar_211<=9'h14E;//N
      Mostrar_212<=9'h154;//T
      Mostrar_213<=9'h14F;//O
      Mostrar_214<=9'h120;//ESP
      Mostrar_215<=9'h120;//ESP
end
end

LCD_TEST u5 (//Host Side
         .iCLK(cl),
         .iRST_N(DLY_RST),
             //    LCD Side
         .LCD_DATA(LCD_DATA),
         .LCD_RW(LCD_RW),
         .LCD_EN(LCD_EN),
         .LCD_RS(LCD_RS),   
         .Mostrar_10(Mostrar_10),
		   .Mostrar_11(Mostrar_11),
			.Mostrar_12(Mostrar_12),
			.Mostrar_13(Mostrar_13),
			.Mostrar_14(Mostrar_14),
			.Mostrar_15(Mostrar_15),
			.Mostrar_16(Mostrar_16),
			.Mostrar_17(Mostrar_17),
			.Mostrar_18(Mostrar_18),
			.Mostrar_19(Mostrar_19),
			.Mostrar_110(Mostrar_110),
			.Mostrar_111(Mostrar_111),
			.Mostrar_112(Mostrar_112),
			.Mostrar_113(Mostrar_113),
			.Mostrar_114(Mostrar_114),
			.Mostrar_115(Mostrar_115),
			.Mostrar_20(Mostrar_20),
			.Mostrar_21(Mostrar_21),
			.Mostrar_22(Mostrar_22),
			.Mostrar_23(Mostrar_23),
			.Mostrar_24(Mostrar_24),
			.Mostrar_25(Mostrar_25),
			.Mostrar_26(Mostrar_26),
			.Mostrar_27(Mostrar_27),
			.Mostrar_28(Mostrar_28),
			.Mostrar_29(Mostrar_29),
			.Mostrar_210(Mostrar_210),
			.Mostrar_211(Mostrar_211),
			.Mostrar_212(Mostrar_212),
			.Mostrar_213(Mostrar_213),
			.Mostrar_214(Mostrar_214),
			.Mostrar_215(Mostrar_215)
             );

endmodule


