/*
 * Generated by Digital. Don't modify this file!
 * Any changes will be lost if this file is regenerated.
 */

module sumres (
  input op,
  input a,
  input b,
  input cbi,
  output s,
  output cbo
);
  wire s0;
  assign s0 = ~ a;
  assign s = ((s0 & ~ b & cbi) | (s0 & b & ~ cbi) | (a & ~ b & ~ cbi) | (a & b & cbi));
  assign cbo = ((a & cbi & ~ op) | (a & b & ~ op) | (s0 & cbi & op) | (s0 & b & op) | (b & cbi));
endmodule

module Suma_resta (
  input a_3,
  input a_2,
  input a_1,
  input a_0,
  input b_3,
  input b_2,
  input b_1,
  input b_0,
  input Op,
  output s_4,
  output s_3,
  output s_2,
  output s_1,
  output s_0
);
  wire s0;
  wire s1;
  wire s2;
  sumres sumres_i0 (
    .op( Op ),
    .a( a_0 ),
    .b( b_0 ),
    .cbi( 1'b0 ),
    .s( s_0 ),
    .cbo( s2 )
  );
  sumres sumres_i1 (
    .op( Op ),
    .a( a_1 ),
    .b( b_1 ),
    .cbi( s2 ),
    .s( s_1 ),
    .cbo( s1 )
  );
  sumres sumres_i2 (
    .op( Op ),
    .a( a_2 ),
    .b( b_2 ),
    .cbi( s1 ),
    .s( s_2 ),
    .cbo( s0 )
  );
  sumres sumres_i3 (
    .op( Op ),
    .a( a_3 ),
    .b( b_3 ),
    .cbi( s0 ),
    .s( s_3 ),
    .cbo( s_4 )
  );
endmodule

module CompUnsigned #(
    parameter Bits = 1
)
(
    input [(Bits -1):0] a,
    input [(Bits -1):0] b,
    output \> ,
    output \= ,
    output \<
);
    assign \> = a > b;
    assign \= = a == b;
    assign \< = a < b;
endmodule


module Mux_2x1_NBits #(
    parameter Bits = 2
)
(
    input [0:0] sel,
    input [(Bits - 1):0] in_0,
    input [(Bits - 1):0] in_1,
    output reg [(Bits - 1):0] out
);
    always @ (*) begin
        case (sel)
            1'h0: out = in_0;
            1'h1: out = in_1;
            default:
                out = 'h0;
        endcase
    end
endmodule


module bitsToBcd (
  input [3:0] b,
  output [3:0] d
);
  wire [3:0] s0;
  wire s1;
  wire s2;
  wire s3;
  wire s4;
  wire s5;
  wire s6;
  wire s7;
  wire [3:0] s8;
  wire s9;
  wire s10;
  wire s11;
  wire s12;
  wire s13;
  wire s14;
  wire s15;
  wire s16;
  wire [3:0] const4b3;
  assign const4b3 = 4'b11;
  assign s3 = b[0];
  assign s4 = b[1];
  assign s5 = b[2];
  assign s6 = b[3];
  assign s12 = const4b3[0];
  assign s11 = const4b3[1];
  assign s10 = const4b3[2];
  assign s9 = const4b3[3];
  assign s0[0] = s3;
  assign s0[1] = s4;
  assign s0[2] = s5;
  assign s0[3] = s6;
  Suma_resta Suma_resta_i0 (
    .a_3( s6 ),
    .a_2( s5 ),
    .a_1( s4 ),
    .a_0( s3 ),
    .b_3( s9 ),
    .b_2( s10 ),
    .b_1( s11 ),
    .b_0( s12 ),
    .Op( 1'b0 ),
    .s_3( s13 ),
    .s_2( s14 ),
    .s_1( s15 ),
    .s_0( s16 )
  );
  CompUnsigned #(
    .Bits(4)
  )
  CompUnsigned_i1 (
    .a( 4'b101 ),
    .b( s0 ),
    .\= ( s1 ),
    .\< ( s2 )
  );
  assign s8[0] = s16;
  assign s8[1] = s15;
  assign s8[2] = s14;
  assign s8[3] = s13;
  assign s7 = (s1 | s2);
  Mux_2x1_NBits #(
    .Bits(4)
  )
  Mux_2x1_NBits_i2 (
    .sel( s7 ),
    .in_0( s0 ),
    .in_1( s8 ),
    .out( d )
  );
endmodule
